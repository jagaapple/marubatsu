# ==============================================================================================================================
# TS LINT
# ==============================================================================================================================
rulesDirectory:
  - "tslint-plugin-prettier"
extends:
  - "tslint:latest"
  - "tslint-consistent-codestyle"
  - "tslint-config-prettier"
rules:

  # ----------------------------------------------------------------------------------------------------------------------------
  # Default Rules
  # ----------------------------------------------------------------------------------------------------------------------------
  # Enforce function overloads.
  adjacent-overload-signatures: true
  # Enforce vertical alignment such as parameters, arguments, and etc.
  align: false
  # Require using either ‘T[]’ or ‘Array' for arrays.
  array-type: [true, "array"]
  # Require parentheses around the parameters of arrow function definitions.
  arrow-parens: [true, "ban-single-arg-parens"]
  # Suggests to convert `() => { return x; }` to `() => x`.
  arrow-return-shorthand: true
  # Warn for an awaited value that is not a Promise.
  await-promise: true
  # Disallow the comma operator to be used.
  # NG: func((arg1, arg2));
  # NG: switch (foo) {
  #       case 1, 2: ...
  #       case 3: ...
  #     }
  # NG: let x: number = (y = 1, z = 2);
  ban-comma-operator: true
  # Disallow to use specific type directly.
  ban-types:
    - true
    - ["Object", "Use {} literal instead."]
    - ["String", "Use \"string\" literal instead."]
  # In a binary expression, a literal should always be on the right-hand side if possible.
  # For example, prefer `x + 1` over `1 + x` .
  binary-expression-operand-order: true
  # An interface or literal type with just a call signature can be written as a function type.
  callable-types: true
  # Enforce PascalCased class and interface names.
  class-name: true
  # Enforce formatting rules for single-line comments.
  comment-format: [true, "check-space"]
  # Enforce documentation for important items be filled out.
  completed-docs: false
  # Enforce braces for `if` , `for` , `do` , and `while` statements.
  # NG: if (foo === bar)
  #       foo++;
  #       bar++;
  curly: [true, "ignore-same-line"]
  # Enforce a threshold of cyclomatic complexity.
  cyclomatic-complexity: [true, 20]
  # Warn when deprecated APIs are used.
  deprecation: true
  # Enforce UTF-8 file encoding.
  encoding: true
  # Ensure the file ends with a newline.
  eofline: true
  # Enforce a certain header comment for all files, matched by a regular expression.
  file-header: [true]
  # Require to use `if` statement in a `for ... in` .
  # OK: for (let key in someObject) {
  #       if (someObject.hasownProperty(key) { ... }
  #     }
  forin: true
  # Disallow importing the specified modules directly via `import` and `require` .
  import-blacklist: false
  # Ensure proper spacing between import statement keywords.
  import-spacing: true
  # Enforce indentation with tabs or spaces.
  indent: [true, "spaces", 2]
  # Require interface names to begin with a capital "I".
  interface-name: [true, "never-prefix"] # Disallow "I" prefix
  # Prefer an interface declaration over a type literal ( `type T = { ... }` ).
  interface-over-type-literal: true
  # Enforce basic format rules for JSDoc comments.
  jsdoc-format: true
  # Allow to use labels in only `do` , `for` , `while` , or `switch` statements.
  label-position: true
  # Enforce a consistent linebreak style.
  linebreak-style: [true, "LF"]
  # Require that a default import have the same name as the declaration it imports.
  match-default-export-name: false
  # A file may not contain more than the specified number of classes.
  max-classes-per-file: [true, 1, "exclude-class-expressions"]
  # Require files to remain under a certain number of lines.
  max-file-line-count: [true, 1000]
  # Require lines to be under a certain max length.
  max-line-length: [true, 128]
  # Require explicit access modifier declarations for class members.
  member-access: [true, "no-public"] # Require declarations except for "public" access modifier
  # Enforce member ordering.
  member-ordering:
    - true
    - order:
        - "public-static-field"
        - "public-instance-field"
        - "protected-static-field"
        - "protected-instance-field"
        - "private-static-field"
        - "private-instance-field"
        - "public-constructor"
        - "protected-constructor"
        - "private-constructor"
        - "public-static-method"
        - "public-instance-method"
        - "protected-static-method"
        - "protected-instance-method"
        - "private-static-method"
        - "private-instance-method"
  # Enforce blank line before return when not the only line in the block.
  newline-before-return: true
  # Require that chained method calls be broken apart onto separate lines.
  newline-per-chained-call: false
  # Require parentheses when invoking a constructor via the `new` keyword.
  new-parens: true
  # Require the use of `as Type` for type assertions instead of `<Type>` .
  # NG: <number> 10
  # OK: 10 as number
  no-angle-bracket-type-assertion: true
  # Disallow `any` type declaration.
  no-any: false
  # Disallow `arguments.callee` method because ES5 forbits use of it.
  no-arg: true
  # Disallow bitwise operators such as `&` , `&=` , `|` , `|-` , and etc.
  no-bitwise: false
  # Warn on comparison to a boolean literal, as in `x === true` .
  no-boolean-literal-compare: true
  # Disallow any type of assignment in `do-while` , `for` , `if` , and `while` statements.
  # NG: if (foo = bar) { ... }
  # OK: for (let: number = 1, ...) { ... }
  no-conditional-assignment: true
  # Disallow one or more blank lines in a row.
  no-consecutive-blank-lines: [true, 2]
  # Disallow `console` methods.
  no-console: [true, "error"] # Except for `console.error`
  # Disallow access to the constructors of String, Number, and Boolean object.
  no-construct: true
  # Disallow `debugger` statements.
  no-debugger: true
  # Disallow default exports in ES2015 style modules, use named exports instead.
  no-default-export: false
  # Disallow multiple import statements from the same module.
  no-duplicate-imports: true
  # Warn if `super()` appears twice in a constructor.
  no-duplicate-super: true
  # Warn if a case appears twice in switch statements.
  no-duplicate-switch-case: true
  # Disallow duplicate variable declarations in the same block scope.
  no-duplicate-variable: [true, "check-parameters"] # Check for variables with the same name as a parameter
  # Ban usage of the delete operator with computed key expressions.
  no-dynamic-delete: true
  # Disallow empty blocks.
  no-empty: true
  # Disallow empty interfaces.
  no-empty-interface: false
  # Disallow `eval` function invocations.
  no-eval: true
  # Promises returned by functions must be handled appropriately.
  no-floating-promises: true
  # Disallow iterating over an array with a for-in loop.
  no-for-in-array: true
  # Disallow to import modules that are not listed as dependency in the project's package.json.
  no-implicit-dependencies: [false]
  # Avoid import statements with side-effect.
  no-import-side-effect:
    - true
    - ignore-module: "ress"
  # Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean.
  no-inferrable-types: false
  # Disallow to use empty object {} as a type.
  no-inferred-empty-object-type: true
  # Disallow internal `module` .
  no-internal-module: true
  # Warn if `${` appears in not template strings.
  no-invalid-template-strings: true
  # Disallow `this` statements in not class.
  no-invalid-this: true
  # Disallow irregular whitespace within a file, including strings and comments.
  no-irregular-whitespace: true
  # Disallow magic numbers except for -1, 0, and 1.
  no-magic-numbers: false
  # Disallow mergeable namespaces in the same file.
  no-mergeable-namespace: true
  # Warn on apparent attempts to define constructors for interfaces or `new` for classes.
  # NG: interface T { new(): T; }
  no-misused-new: true
  # Disallow internal modules and namespaces.
  no-namespace: true
  # Disallow non-null assertions using the `!` postfix operator.
  no-non-null-assertion: false
  # Disallow to use `null` keyword.
  no-null-keyword: true
  # Forbid an object literal to appear in a type assertion expression.
  # Prefer `const x: T = { ... };` to `const x = { ... } as T;`
  no-object-literal-type-assertion: true
  # Disallow parameter properties in class constructors.
  # Because parameter properties can be confusing to those new to TS as they are less explicit than other ways of declaring and
  # initializing class members.
  no-parameter-properties: true
  # Disallow reassigning parameters.
  # NG function xxx(param: number) { param = 10; }
  no-parameter-reassignment: true
  # Forbid JSDoc which duplicates TypeScript functionality.
  no-redundant-jsdoc: true
  # Disallow `/// <reference path="">` imports, use ES2015 style imports instead.
  no-reference: true
  # Don't `<reference types="foo" />` if you import `foo` anyway.
  no-reference-import: true
  # Disallow invocation of `require()` .
  no-require-imports: true
  # Disallow unnecessary `return await` .
  no-return-await: true
  # Disallow shadowing variable declarations, in other words, disallow to declare the same named variables inclusion relation
  # scope.
  # NG: let x: number = 0; for (...) { let x: number = 10; }
  no-shadowed-variable: true
  # Disallow put commas between empty elements.
  # NG: [,]
  no-sparse-arrays: true
  # Disallow access to properties using string.
  # NG: object["key"]
  no-string-literal: true
  # Throw Error instead of strings.
  # NG: throw "string"
  no-string-throw: true
  # Disallow importing any submodule.
  no-submodule-imports: false
  # Disallow falling through case statements.
  no-switch-case-fall-through: true
  # Disallow unnecessary references to `this` like ES5 style.
  no-this-assignment: true
  # Disallow trailing whitespace at the end of a line.
  no-trailing-whitespace: true
  # Warn when a method is used as outside of a method call.
  no-unbound-method: false
  # Replaces `x => f(x)` with just `f` .
  no-unnecessary-callback-wrapper: true
  # Disallow classes that are not strictly necessary such as an empty class or a class has only constructors.
  no-unnecessary-class: true
  # Forbid a `var` / `let` statement or destructuring initializer to be initialized to `undefined` .
  no-unnecessary-initializer: true
  # Warn when a namespace qualifier ( `A.x` ) is unnecessary.
  no-unnecessary-qualifier: true
  # Warn if a type assertion does not change the type of an expression.
  no-unnecessary-type-assertion: false
  # Warn when using an expression of type `any` in a dynamic way.
  no-unsafe-any: false # For React JSX
  # Disallow control flow statements, such as return, continue, break and throws in finally blocks.
  no-unsafe-finally: true
  # Disallow unused expression statements.
  no-unused-expression: true
  # Disallow usage of variables before their declaration.
  no-use-before-declare: true
  # Disallow usage of the `var` keyword.
  no-var-keyword: true
  # Disallow the use of require statements except in import statements.
  # NG: cosnt module = require("module");
  # OK: import module from "module"; // ES6 style imports
  # OK: import module = require("module");
  no-var-requires: true
  # Require expressions of type `void` to appear in statement position.
  no-void-expression: [true, "ignore-arrow-function-shorthand"]
  # Check that decimal literals should begin with `0.` instead of just `.` , and should not end with a trailing `0` .
  # NG: .1
  # OK: 0.1
  number-literal-format: true
  # Enforce consistent object literal property quote style.
  object-literal-key-quotes: [true, "consistent-as-needed"] # If any property name requires quotes, then all properties must be
                                                            # quoted. Otherwise, no property names may be quoted.
  # Enforce/disallow use of ES2015 object literal shorthand.
  object-literal-shorthand: true # Enforce
  # Check ordering of keys in object literals.
  object-literal-sort-keys: [false, "shorthand-first"]
  # Require the specified tokens to be on the same line as the expression preceding them.
  one-line:
    - true
    - "check-catch"
    - "check-finally"
    - "check-else"
    - "check-open-brace"
    - "check-whitespace"
  # Disallow multiple variable definitions in the same declaration statement.
  one-variable-per-declaration: [true, "ignore-for-loop"]
  # Disallow traditional function expressions.
  only-arrow-functions: [true, "allow-declarations", "allow-named-functions"]
  # Require that import statements be alphabetized and grouped.
  # For more detail, https://palantir.github.io/tslint/rules/ordered-imports/ .
  ordered-imports:
    - true
    - import-sources-order: "any"
      grouped-imports: false
      named-imports-order: "case-insensitive"
      module-source-path: "full"
  # Recommends to use a conditional expression instead of assigning to the same thing in each branch of an if statement.
  prefer-conditional-expression: [true, "check-else-if"]
  # Require that variable declarations use `const` instead of `let` and `var` if possible.
  prefer-const: true
  # Recommend a `for-of` loop over a standard `for` loop if the index is only used to access the array being iterated.
  prefer-for-of: true
  # Warn for class methods that do not use `this` .
  prefer-function-over-method: false
  # Prefer `foo(): void` over `foo: () => void` in interfaces and types.
  prefer-method-signature: false
  # Enforce the use of the ES2015 object spread operator over `Object.assign()` where appropriate.
  # Because object spread allow for better type checking and inference.
  prefer-object-spread: true
  # Require that private variables are marked as `readonly` if they’re never modified outside of the constructor.
  prefer-readonly: true
  # Prefer a switch statement to an `if` statement with simple `===` comparisons.
  prefer-switch: false
  # Prefer a template expression over string literal concatenation.
  prefer-template: [true, "allow-single-concat"] # A single concatenation ( `x + y` ) is allowed, but not more ( `x + y + z` )
  # Require any function or method that returns a promise to be marked async.
  promise-function-async: true
  # Require single or double quotes for string literals.
  quotemark: [true, "double", "jsx-double"]
  # Require the radix parameter to be specified when calling parseInt.
  radix: true
  # When adding two variables, operands must both be of type number or of type string.
  # NG: 1 + "1"
  restrict-plus-operands: false
  # Prefer `return;` in void functions and `return undefined;` in value-returning functions.
  return-undefined: false
  # Enforce consistent semicolon usage at the end of every statement.
  semicolon: [true, "always", "ignore-interfaces"]
  # Require or disallow a space before function parenthesis.
  space-before-function-paren:
    - true
    - anonymous: "never"
      named: "never"
      asyncArrow: "always"
      method: "never"
      constructor: "never"
  # Enforce spaces within parentheses or disallow them. Empty parentheses `()` are always allowed.
  space-within-parens: false
  # Restrict the types allowed in boolean expressions.
  # For more detail, https://palantir.github.io/tslint/rules/strict-boolean-expressions/ .
  strict-boolean-expressions: false
  # Warn for type predicates that are always true or always false.
  strict-type-predicates: false
  # Require a default case in all `switch` statements.
  switch-default: true
  # Check whether the final clause of a switch statement ends in `break;` .
  switch-final-break: true
  # Require or disallow trailing commas in array and object literals, destructuring assignments, function typings, named
  # imports and exports and function parameters.
  trailing-comma:
    - true
    - multiline: "always"
      singleline: "never"
  # Require `===` and `!==` in place of `==` and `!=` .
  triple-equals: [true, "allow-undefined-check"]
  # Require type definitions to exist.
  typedef:
    - true
    # - "call-signature"
    # - "arrow-call-signature"
    - "parameter"
    - "arrow-parameter"
    - "property-declaration"
    # - "variable-declaration"
    - "member-variable-declaration"
    # - "object-destructuring"
    # - "array-destructuring"
  # Require or Disallow whitespace for type definitions (before or after semi-colon).
  # Each key should have a value of `"onespace"` , `"space"` , or `"nospace"` .
  typedef-whitespace:
    - true
    # Before semi-colon.
    - call-signature: "nospace"
      index-signature: "nospace"
      parameter: "nospace"
      property-declaration: "nospace"
      variable-declaration: "nospace"
    # After semi-colon.
    - call-signature: "onespace"
      index-signature: "onespace"
      parameter: "onespace"
      property-declaration: "onespace"
      variable-declaration: "onespace"
  # Check that type literal members are separated by semicolons. Enforce a trailing semicolon for multiline type literals.
  type-literal-delimiter: true
  # Warn for any two overloads that could be unified into one by using a union or an optional/rest parameter.
  unified-signatures: true
  # Warn if an explicitly specified type argument is the default for that type parameter.
  use-default-type-parameter: false
  # Enforce use of the `isNaN()` function to check for NaN references instead of a comparison to the `NaN` constant.
  # NG: val === NaN
  # OK: isNaN(val)
  use-isnan: true
  # Check variable names for various errors.
  variable-name:
    - true
    - "check-format"
    - "allow-pascal-case"
    - "ban-keywords"
  # Enforce whitespace style conventions.
  whitespace:
    - true
    - "check-branch"
    - "check-decl"
    - "check-operator"
    - "check-module"
    - "check-separator"
    - "check-rest-spread"
    - "check-type"
    - "check-typecast"
    - "check-type-operator"
    - "check-preblock"


  # ----------------------------------------------------------------------------------------------------------------------------
  # TSLint Consistent Codestyle
  # ----------------------------------------------------------------------------------------------------------------------------
  # For more detail, https://github.com/ajafff/tslint-consistent-codestyle .
  # ----------------------------------------------------------------------------------------------------------------------------
  # Declare parameters as `const` with JsDoc `/** @const */`
  const-parameters: false
  # Recommends to use an early exit instead of a long `if` block.
  early-exit: true
  # Enforces where to consistently use curly braces where not strictly necessary.
  ext-curly: false
  # Fine grained configuration to enfoce consistent naming for almost everything.
  # E.g. variables, functions, classes, methods, parameters, enums, etc.
  naming-convention: false
  # Prefer `<Type>foo` over `foo as Type` .
  no-as-type-assertion: false
  # Don't use `get foo() { return this.foo; }` .
  # This is most likely a typo.
  no-accessor-recursion: true
  # Identifies nested if statements that can be combined into one.
  no-collapsible-if: true
  # Like no-else-return from eslint.
  no-else-after-return: false
  # Just `return;` instead of `return undefined;` .
  no-return-undefined: true
  # Ban the use of `this` in static methods.
  no-static-this: true
  # Like `no-else-after-return` but better.
  no-unnecessary-else: true
  # Finds type annotations that can safely be removed.
  no-unnecessary-type-annotation: false
  # Find dead code and unused declarations.
  no-unused: true
  # Checks if the returned variable is declared right before the `return` statement.
  no-var-before-return: true
  # Shorthand properties should precede regular properties.
  object-shorthand-properties-first: true
  # Configure how and where to declare parameter properties.
  parameter-properties: false
  # Prefer `const enum` where possible.
  prefer-const-enum: false # Babel does not support.
  # Prefer a `while` loop instead of a `for` loop without initializer and incrementer.
  prefer-while: true


  # ----------------------------------------------------------------------------------------------------------------------------
  # Prettier
  # ----------------------------------------------------------------------------------------------------------------------------
  # For more detial, https://github.com/ikatyang/tslint-plugin-prettier .
  # ----------------------------------------------------------------------------------------------------------------------------
  prettier: true
